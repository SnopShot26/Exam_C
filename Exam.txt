Платформа .Net
1) Что такое платформа .Net?
ниджат грязный пидор
2) В чем разница между .Net Framework и .Net Core?
3) В чем заключаются основные отличия C# и C++?
4) Как отличается процесс компиляции и выполнения программы, написанной на C++ и C#?
5) Какие языки входят в .Net?
6) Из каких основных компонентов состоит .Net?
7) В чем заключаются преимущества .Net перед C++?
8) В чем заключаются недостатки .Net перед C++?
9) Что такое CLR (Common Language Runtime)?
{
  NET предоставляет среду выполнения (среду CLR), 
  которая выполняет код и предлагает службы, облегчающие процесс разработки.
  Компиляторы и иные средства позволяют использовать функции среды CLR и дают 
  разработчикам возможность писать код, использующий преимущества этой среды управляемого  выполнения. 
  Код,разработанный с использованием языкового компилятора для среды выполнения, называют управляемым. 
  В нем используются преимущества таких средств, как объединение языков  программирования, объединенная обработка исключений, усиленная безопасность, 
  поддержка отслеживания версий и развертывания, упрощенная модель взаимодействия компонентов, а также службы отладки и профилирования.
  
}
10) Что такое JIT (Just In Time) Compiler?
{
  это модуль в CLR который переводит IL-COD в машинный код;
}
11) Что такое GC (Garbage Collector)?
{
   Мусорщик который подчищает за нами;
}
12) Что такое BCL (Base Class Library) / FCL (Framework Class Library)?
{
  Base Class Library, или так называемая .NET FCL (англ. Framework Class Library), сокращённо BCL — стандартная библиотека классов платформы «.NET Framework».
  Программы,   написанные на любом из языков, поддерживающих платформу .NET, могут
  пользоваться классами и методами BCL — создавать объекты классов, вызывать их методы, наследовать необходимые классы BCL и т. д.
  Стоит отметить, что не все языки, поддерживающие платформу .NET, предоставляют или обязаны предоставлять одинаково полный доступ ко всем 
  классам и всем возможностям BCL — это зависит от особенностей реализации конкретного компилятора и языка. 
}
13) Что такое CTS (Common Type System)?
{
  Система общих типов 
  Система общих типов CTS определяет способ объявления, использования и управления типами в среде CLR,
  а также является важной составной частью поддержки межъязыковой интеграции  в среде выполнения. Система общих типов выполняет следующие функции.
  
      Формирует инфраструктуру, которая позволяет обеспечивать межъязыковую интеграцию, безопасность типов и высокопроизводительное выполнение кода.
  
      Предоставляет объектно-ориентированную модель, поддерживающую полную реализацию многих языков программирования.
  
      Определяет правила, которых необходимо придерживаться в языке. Эти правила помогают обеспечить взаимодействие объектов, написанных на разных языках.
  
      Предоставляет библиотеку, которая содержит типы-примитивы (например, Boolean, Byte, Char, Int32 и UInt64), используемые в разработке приложений.
}
14) Что такое CLS (Common Language System)? //Спросить У Амирана

Сборка .Net приложений
15) Что такое сборка (assembly)?
16) Что такое MS-IL (Microsoft Intermediate Language)?
17) Что такое манифест (manifest)?
18) Что такое метаданные (metadata)?
19) Что такое рефлексия (reflection)?
20) Что такое рефлектор (reflector)?
21) Что такое дотфускатор (dotfuscator)?
22) В чем отличие управляемого кода от неуправляемого кода?
Типы данных .Net
23) В чем отличие ссылочных и значимых типов данных?
24) Чем отличаются друг от друга классы и структуры?
25) Что такое object? Какие методы он содержит?
26) Что такое стек (stack), куча (heap) и управляемая куча (managed heap)?
27) Что такое анонимный тип?
28) Что такое nullable-тип?
29) В чем заключается особенности преобразования типов данных в .Net?

30) Что такое ref и out параметры? В чем между ними разница?
31) Что такое in параметр? В каких случаях стоит его применять?
32) Что такое ключевое слово params?
33) Чем enum в .Net отличается от enum в C++?
34) Что такое упаковка и распаковка (boxing and unboxing)? Почему это плохо и как
его избежать?
35) В чем разница между классами String и StringBuilder?
Классы
36) Для чего нужны спецификаторы доступа у классов?
37) Назовите все 6 видов спецификаторов доступа членов класса. Для чего они
нужны?
38) Для чего нужен статический конструктор? Когда он вызывается?
39) Что такое делегирование конструкторов?
40) Что такое частичный класс (partial class)?
41) В чем отличие между константным и readonly полем?
42) Что такое свойство (property)?
43) Что такое авто-свойство (auto-property)?
44) Что такое индексатор?
45) Что такое итератор / энумиратор?
46) Для чего нужны пространства имен (namespaces)?
47) Что такое метод-расширение (extension method)?
48) Что такое обобщения (generics)?
49) Что такое правила обобщения (generics)? Какие правила вы знаете?
Наследование и полиморфизм
50) Опишите особенности наследования в .Net.
51) Для чего нужно ключевое слово base?
52) Что такое запечатанный класс (sealed class)?
53) Что такое абстрактный класс (abstract class)?
54) В чем разница между виртуальным (virtual) и абстрактным (abstract) методов?
55) В чем разница между переопределением (overriding) и перегрузкой (overloading)?
56) В чем разница между переопределением (overriding) и замещением (new)?
Исключения
57) Объясните принцип работы try, catch.
58) Для чего нужно ключевое слово finally?

59) Что делает конструкция using?
60) Для чего нужно ключевые слова checked и unchecked?
Интерфейсы
61) Что такое интерфейс?
62) В чем отличие абстрактного класса от интерфейса?
63) Что допустимо создавать в интерфейсе?
64) Может ли интерфейс содержать реализацию методов?
65) Что такое интерфейсная ссылка?
66) Что такое явная реализация интерфейса?
67) Какие стандартные интерфейсы вы знаете?
68) Для чего нужен интерфейс IComparable?
69) Для чего нужен интерфейс IClonable?
70) Для чего нужен интерфейс IEnumerable?
71) Для чего нужен интерфейс IEnumerator?
72) Для чего нужен интерфейс IDisposable?
73) Для чего нужен интерфейс IEqualityComparer?
Делегаты и события
74) Что такое делегат? Для чего нужны делегаты?
75) Что такое событие? Для чего нужны события?
76) В чем разница между делегатом и событием?
77) Что делает метод Invoke?
78) Что такое анонимный метод (anonymous method)?
79) Что такое лямбда-выражение (lambda-expression)?
Коллекции
80) Какие необобщенные (non-generic) коллекции вы знаете?
81) Какие обобщенные (generic) коллекции вы знаете?

82) В чем преимущества обобщенных (generic) коллекций над необобщенными (non-
generic)?

83) В чем разница между интерфейсами IEnumerable<T> и IEnumerator<T>?
84) Что такое ObservableCollection<T>? В чем отличие от List<T>?
85) Что такое IReadOnlyCollection<T> и IReadOnlyDictionary<T>?
86) В чем разница между IEnumerable<T>, ICollection<T> и IDictionary<K, V>?
87) В каких ситуациях следует использовать List<T>, LinkedList<T>, HashSet<T>,
SortedSet<T>?

88) В чем отличие Dictionary<K,V>, SortedDictionary<K,V> и SortedList<K,V>?
Сборщик мусора (Garbage Collector)
89) Объясните принцип хранения объектов в памяти.
90) Зачем нужен сборщик мусора?
91) Что такое поколения?
92) Что такое граф объектов?
93) Что такое управляемые и неуправляемые ресурсы?
94) Что такое финализатор?
95) Для чего нужен IDisposable.Dispose?
96) Что сборщик мусора делает с финализируемыми объектами?
97) Какие методы сборщика мусора вы знаеме?
Потоки (streams) и файлы
98) Что такое поток (stream)?
99) Что такое FileStream?
100) Для чего нужен StreamReader?
101) Для чего нужен StreamWriter?
102) Для чего нужен BinaryReader?
103) Для чего нужен BinaryWriter?
104) Для чего нужен MemoryStream?
105) Что такое сериализация?
106) Какие виды сериализации вы знаете?
107) В чем отличие бинарной, XML, JSON сериализации?
Прочее
108) Для чего нужно ключевое слово yield?
109) Объясните принцип работы цикла foreach.
110) Как работает ключевое слово new при создании объекта класса или структуры?
111) Как хранятся в памяти массивы?
112) В чем особенности структур в С#?
113) Что такое readonly и ref структуры?
114) Какие методы находятся в классе Object?
115) Что такое значимый тип (ValueType)?
116) Для чего нужен ToString?
117) Для чего нужен метод Equals?

118) Для чего нужен метод GetHashCode?
119) Для чего нужен метод MemberwiseClone?
120) Для чего нужен метод GetType?
121) Что такое регулярное выражение?
122) Что такое атрибут?
123) Что такое LINQ?
124) Какие методы из библиотеки LINQ вы знаете?
125) В чем отличие между query и method syntax в LINQ?
126) Для чего нужен класс Span<T>?
127) Для чего нужен класс Lazy<T>?
